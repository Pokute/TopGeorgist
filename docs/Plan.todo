Plan for Top Georgist:

✔ Milestone 1: @done(18-03-25 06:44)

	✔ Autopack with webpack. @done(18-03-25 06:43)
	✔ Itch.io page @done(18-03-25 06:43)
		✘ Butler push @cancelled(18-03-25 06:43)
	✔ Open up in browser @done(18-03-25 06:43)
	✔ Has a player @done(18-03-25 06:43)
		✔ Player can move around @done(18-03-25 06:43)
		✔ Player has property "money" @done(18-03-25 06:43)
			✔ Player can spend money. @done(18-03-25 06:43)
		✔ Player has property "calories" @done(18-03-25 06:43)
			✔ Calories drop all the time. @done(18-03-25 06:43)
		✔ Player has inventory. @done(18-03-25 06:43)
	✔ Has a map @done(18-03-25 06:43)
		✔ Store @done(18-03-25 06:43)
			✔ Buys food @done(18-03-25 06:43)
			✔ Sells food @done(18-03-25 06:43)
			✔ Has property "money" @done(18-03-25 06:43)
			✔ Has limited inventory @done(18-03-25 06:43)
		✔ Plots @done(18-03-25 06:43)
			✔ Player can plant shoots @done(18-03-25 06:43)
			✔ Shoots grow into food @done(18-03-25 06:43)
			✔ It takes time for shoots to grow into food. @done(18-03-25 06:43)
			✔ Food can be collected by players, removing the seed. @done(18-03-25 06:43)
	✔ Items @done(18-03-25 06:43)
		✔ Money @done(18-03-25 06:43)
		✔ Shoots @done(18-03-25 06:43)
			✔ Can be planted @done(18-03-25 06:43)
		✔ Food @done(18-03-25 06:43)
			✔ Can be eaten to increase calories @done(18-03-25 06:43)
			✔ Can be turned into 2 shoots. @done(18-03-25 06:43)

✔ Milestone 2: @done(18-03-25 06:44)

	✔ Refactor view. @done(18-03-25 06:44)
	✔ tgoId generation. @done(18-03-25 06:44)
		✔ uuid npm package installed. @done(18-03-25 06:44)
	✔ Player creation. @done(18-03-25 06:44)
	✔ Multiplayer @done(18-03-25 06:44)
		✔ Receiving the map @done(18-03-25 06:44)
		✔ Receiving tgos @done(18-03-25 06:44)
			✔ Move function from tgos to types. @done(18-03-25 06:44)
	✔ Map @done(18-03-25 06:44)
		✔ Seeded generation. @done(18-03-25 06:44)
	✔ Leaderboards @done(18-03-25 06:44)
	✔ Buildings @done(18-03-25 06:44)
		✔ Rent office @done(18-03-25 06:44)
			✔ Used to reserve land @done(18-03-25 06:44)
			✔ Used to pay rent @done(18-03-25 06:44)
		✔ Government building @done(18-03-25 06:44)
			✔ Player spawns here @done(18-03-25 06:44)
			✔ Has an account for each player @done(18-03-25 06:44)
			✔ Player can collect money in account. @done(18-03-25 06:44)
			✔ Accounts gets equal % of all rent collected from rent office. @done(18-03-25 06:44)
	✔ Tick into redux. @done(18-03-25 06:44)
	✔ Reduxise all callbacks. @done(18-03-25 06:44)

Milestone 3:

	✔ Move actions from Types to Components. @done(18-03-25 08:30)
		✔ Pineapple eat @done(18-03-25 08:08)
		✔ Pineapple make into shoots @done(18-03-25 08:27)
		✔ Plant pineapple shoots @done(18-03-25 08:27)
	✔ Tasks vs. Goals. Decide whether to have
	✔ Time sinks
		✔ Doing most actions should require ticks to complete.
			✔ Movement
			✔ Eating @done(18-04-01 03:41)
			✔ Planting @done(18-04-01 14:03)
			✔ Harvesting @done(18-04-01 18:53)
			✔ Extracting seeds @done(18-04-01 13:55)
			✔ Trading @done(18-04-01 19:01)
	✔ UI progress bar. @done(18-03-25 06:45)
		✔ Segmented by ticks, but progress 0 -> 1 is linear in progress bar @done(18-03-25 06:45)
		- Above means that for most tasks, the start parts take long time and don't produce much, but later parts take less time and produce more.
	✔ View click handling generification. @done(18-04-03 22:12)
		✔ UI mouse selection of positions in UI paramInput. @done(19-03-17 20:25)
		✔ New code for movement target. @done(18-04-03 23:08)
	✔ Simplify gameRender. @done(18-04-01 05:19)
	✔ redux store array accessor shorthand functions / utility. @done(18-03-25 06:44)
	✔ Rendering - 60fps support @done(18-03-25 06:50)
	✔ Rehydrate - server side. @done(18-04-01 03:38)
	✔ Client resume player name. @done(18-12-22 11:20)
	✔ Client side token persistence. @done(18-12-22 11:20)
	✔ Password salting. @done(18-12-23 03:55)
		✔ Client-side. @done(18-12-22 23:15)
		✔ Server-side. @done(18-12-23 03:55)
	✔ Eslint integration, rules and first pass. @done(18-04-01 03:34)
	✘ Eslint to support class arrow methods.
		- Not using classes anymore
	✔ Webpack 3 -> 4 migration @done(18-04-01 03:33)
	✔ Express server running webpack and file serving. @done(18-04-01 03:37)
	✔ Storybook (@storybook/react-native) https://github.com/storybooks/storybook @done(18-04-05 23:59)
	✔ Re-implement broken stuff:
		✔ Eating
		✔ Seed extraction
		✔ Planting
		✔ Harvesting
		✔ Plant growing
		✔ Replace plantable with deployable
	✔ Bugs:
		✔ Fix selecting a claimable tile also claiming it with the same click.
		✔ Fix rent paying not resetting outstanding rent.
		✔ Fix rent paying resulting in negative money.

Milestone 4:

	✔ Redux persistent storage
	✔ Automatic reconnect for client
	☐ Farming overhaul
		☐ Plant growth progress can be seen. Progressbar?
		☐ Pineapples grow edible, but hydrocarbons doesn't increase after certain point.
			? How does the growing work?
				? Automatic recipe of 'tick+sunlight+nutrition+water+growthPotential -> hydrocarbons'?
			? How does the growing stop?
				? Has initial growthPotential stat that decreases every tick/growth?
				? growthPotential decreasing even when not growing would get us lower yields on suboptimal environments.
			? Having plants immediately harvestable is not good
				? How to force minimum growth needed
				? Different method of tilling/removing just planted items. Makes clear it won't produce and has a chance(?) of failing.
		☐ Canning system
			✔ Store sells cannery
			✔ Store sells can blanks.
			✔ Canning machine can be deployed.
				☐ Canning machine can be used to can pineapples.
			✔ Store buys canned pineapples
		✔ Rename 'harvest' action -> generic 'collect' for deployables.
	☐ Government/Rent office bureucracy
	☐ Goals pausing and canceling.
	☐ Economy
		☐ More sinks
	☐ Rendering overhaul - support for custom renderers for items.
		☐ Add graphics for most items.
	☐ UI cleanup.
		☐ Separate game-specific UI files from generic UI toolkit files.
		☐ Collabsible UI items.
		☐ Movable categories.
	☐ Hot reload?
	✔ React-Redux -> 7.1
		✔ Convert to redux hooks as we go.
	☐ Investigate aliases for import to avoid relative paths.
	✔ Publishing
	✔ Server hosting.

Milestone 5:

	☐ Player
		☐ New "energy" stat.
		☐ Doing different actions use "energy"
		☐ Calorie burn regenerates energy.
		☐ Can sleep
			☐ Can be done anywhere.
			☐ Regenerates energy
			☐ Sleeping in a bed regenerates more energy.
		☐ Move unique name feature from players to a ComponentUniqueLabel.
	☐ Buildings
		☐ Barracks
			☐ Has beds that cost to use
	☐ Buying/selling having modifiable amount.
	☐ UI mouse selection stack can override cursor shape.
	☐ Better map generation.
	☐ Convert game logic from sagas into reducers.
		! Sagas can't be saved/loaded so they can't be used for multi-tick events. Better just remove them completely from game logic. Still can be used for connection code.
		☐ sagas/taskQueue.ts
		☐ concerns/consumer.js
		☐ concerns/work.js
		☐ concerns/transaction.js
		☐ concerns/rentOffice.js
		☐ sagas/buildings/government.ts
		☐ sagas/goal.ts
		☐ sagas/goalCreator.ts
	☐ Refactor client init/mainloop code.
	☐ Refactor server init/mainloop code.
	☐ Move netActions.send to a redux-saga that listens to all applicable actions?
	☐ Investigate
		☐ redux-loop https://github.com/redux-loop/redux-loop
		☐ reducer-reducer?
		☐ Need for redux-thunk?
	☐ Password changing.
	☐ Save serverside password salt more securely.
	✔ Consider using dotenv https://github.com/motdotla/dotenv
	☐ Reset reconnection timer on window/tab focus event.
	☐ Manual reconnect with a button or just any interaction.
	☐ Investigate µWebSockets. https://github.com/uNetworking/uWebSockets.js

Unseen future:
	☐ Implement eating, planting, buying, selling automatically by goals.
	☐ Sanity checks for items and types, check for typos etc.
	☐ Client reconnect gracefully handles a server with different state (no accounts, etc)

Stories:

	☐ Player passes a food cart and tempted by delicious aromas has to either buy and eat some of the appealing food or suffer a mood malus.
	☐ Government has ordered a census of all ducks. A player picks up a contract for an area, but encounters a closed off area with high tolls. By entering a census mode, he's able to count the ducks inside, but is otherwise near blind and must return to starting position to exit the mode.

Info:
	https://en.wikipedia.org/wiki/Henry_George
	https://en.wikipedia.org/wiki/Georgism
	https://en.wikipedia.org/wiki/Geolibertarianism
	https://en.wikipedia.org/wiki/Left-libertarianism
	https://en.wikipedia.org/wiki/Economic_rent#Land_rent
	https://en.wikipedia.org/wiki/John_Rawls
	https://en.wikipedia.org/wiki/The_Law_of_Peoples
	https://en.wikipedia.org/wiki/Justice_as_Fairness:_A_Restatement
	
	Very impressive world gen: https://sote.miraheze.org/wiki/World

Icebox:

	☐ Investigate
		☐ react-native with -web?

Tasks vs Goals:

	Tasks currently:
		TGO object has a TaskQueue, inside it are Tasks.
		Task:
			* Title - what the players will see.
			* Cost - A list of requirements for completion.
			* Progress - Basically copy of cost in structure.
			* completionAction - Which redux action will fire when completed.
			* advanceActions - Redux actions that are repeated until Progress reaches Cost.
		Verdict:
			Doesn't support Tasks that require tasks to complete. At least without wrapping one into an action.
			Naming of advanceActions is stupid.




	Tasks and Goals.
		Currently tasks are 
		Tasks are something pretty immediately executable.
		Goals have uncertain completion with different possible routes.
	Only Tasks.
		Goals can be implemented by having bigger tasks.
		Having multiple levels for same functionality is stupid, what's when we have multiple goals together? Saga, epic, megagoal?

	Alternative:
		Replace Task.Cost with Task.Goals?
		
	Alternative:
		Replace Task.Cost with Task.Requirements?
		Requirement can be another task.

	Alterantive:
		New Work
		Task -> Goal

		Work converts one resource to another
			Log => Plank
			Energy => Movement
		
		Goal has requirements
		Goal 'figures out' if it needs sub Goals to satisfy requirements
		Goal creates Works until requirements are met

		Example:
			Goal - Reach destination

			There's 'knowledge' that reaching destination requires movement work to create 'steps'

				Checks whether at destination
					Yes: Job done
					No:
						Select a work that best results in movement
						Use movement to create an action that results in a player position change

	
	Alternative:
		Have ONLY goals.
Connections, Clients, accounts , players and controlleds

	Connection
		Websocket connection from client to server.
		Created as needed
		Creates new when disconnected (reconnect)

	Clients
		Web browser with localstorage.
		Saves an account token locally on browser.
		(Later) Remembers current Controlled since those can be switched.

	Account = Player
		One account countrols a single player.

	Account
		Account has a password.
		Account has a player linked.
		Account has a list of tokens to allow remembering users.

	Player
		A tgo.

	Controlled
		Basically a Tgo with a separate uuid. Every Account(?) has a list of uuids that are allowed to control it.

	Other considerations.
		Anyone who wants to play, creates a Player first.
		Account is automatically created with every new Player.
		This Automatic Account doesn't have a password. Token is saved on browser so users can resume playing any time.
		A username / password pair can be assigned to an Automatic Account. This allows logging in with different browsers/devices.

	Flow:
		Client connects to server, client is added to redux.clients
		User wants to creates a player
			Client checks if an account is created,
				if account doesn't exist:
					creates an account
					waits an account to be received.
				Account Exists or account has been recevied:
					Create a player for the account.
