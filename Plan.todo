Plan for Top Georgist:

✔ Milestone 1: @done(18-03-25 06:44)

	✔ Autopack with webpack. @done(18-03-25 06:43)
	✔ Itch.io page @done(18-03-25 06:43)
		✘ Butler push @cancelled(18-03-25 06:43)
	✔ Open up in browser @done(18-03-25 06:43)
	✔ Has a player @done(18-03-25 06:43)
		✔ Player can move around @done(18-03-25 06:43)
		✔ Player has property "money" @done(18-03-25 06:43)
			✔ Player can spend money. @done(18-03-25 06:43)
		✔ Player has property "calories" @done(18-03-25 06:43)
			✔ Calories drop all the time. @done(18-03-25 06:43)
		✔ Player has inventory. @done(18-03-25 06:43)
	✔ Has a map @done(18-03-25 06:43)
		✔ Store @done(18-03-25 06:43)
			✔ Buys food @done(18-03-25 06:43)
			✔ Sells food @done(18-03-25 06:43)
			✔ Has property "money" @done(18-03-25 06:43)
			✔ Has limited inventory @done(18-03-25 06:43)
		✔ Plots @done(18-03-25 06:43)
			✔ Player can plant shoots @done(18-03-25 06:43)
			✔ Shoots grow into food @done(18-03-25 06:43)
			✔ It takes time for shoots to grow into food. @done(18-03-25 06:43)
			✔ Food can be collected by players, removing the seed. @done(18-03-25 06:43)
	✔ Items @done(18-03-25 06:43)
		✔ Money @done(18-03-25 06:43)
		✔ Shoots @done(18-03-25 06:43)
			✔ Can be planted @done(18-03-25 06:43)
		✔ Food @done(18-03-25 06:43)
			✔ Can be eaten to increase calories @done(18-03-25 06:43)
			✔ Can be turned into 2 shoots. @done(18-03-25 06:43)

✔ Milestone 2: @done(18-03-25 06:44)

	✔ Refactor view. @done(18-03-25 06:44)
	✔ tgoId generation. @done(18-03-25 06:44)
		✔ uuid npm package installed. @done(18-03-25 06:44)
	✔ Player creation. @done(18-03-25 06:44)
	✔ Multiplayer @done(18-03-25 06:44)
		✔ Receiving the map @done(18-03-25 06:44)
		✔ Receiving tgos @done(18-03-25 06:44)
			✔ Move function from tgos to types. @done(18-03-25 06:44)
	✔ Map @done(18-03-25 06:44)
		✔ Seeded generation. @done(18-03-25 06:44)
	✔ Leaderboards @done(18-03-25 06:44)
	✔ Buildings @done(18-03-25 06:44)
		✔ Rent office @done(18-03-25 06:44)
			✔ Used to reserve land @done(18-03-25 06:44)
			✔ Used to pay rent @done(18-03-25 06:44)
		✔ Government building @done(18-03-25 06:44)
			✔ Player spawns here @done(18-03-25 06:44)
			✔ Has an account for each player @done(18-03-25 06:44)
			✔ Player can collect money in account. @done(18-03-25 06:44)
			✔ Accounts gets equal % of all rent collected from rent office. @done(18-03-25 06:44)
	✔ Tick into redux. @done(18-03-25 06:44)
	✔ Reduxise all callbacks. @done(18-03-25 06:44)

Milestone 3:

	✔ Move actions from Types to Components. @done(18-03-25 08:30)
		✔ Pineapple eat @done(18-03-25 08:08)
		✔ Pineapple make into shoots @done(18-03-25 08:27)
		✔ Plant pineapple shoots @done(18-03-25 08:27)
	☐ Tasks vs. Goals. Decide whether to have
	☐ Time sinks
		☐ Doing most actions should require ticks to complete.
			☐ Movement
			✔ Eating @done(18-04-01 03:41)
			✔ Planting @done(18-04-01 14:03)
			✔ Harvesting @done(18-04-01 18:53)
			✔ Extracting seeds @done(18-04-01 13:55)
			✔ Trading @done(18-04-01 19:01)
			☐ Government/Rent office bureucracy
		☐ Most actions can be paused
	✔ UI progress bar. @done(18-03-25 06:45)
		✔ Segmented by ticks, but progress 0 -> 1 is linear in progress bar @done(18-03-25 06:45)
		- Above means that for most tasks, the start parts take long time and don't produce much, but later parts take less time and produce more.
	☐ Farming overhaul
		☐ Progress can be seen
		☐ Pineapples grow edible, but calories doesn't increase after certain point.
	✔ View click handling generification. @done(18-04-03 22:12)
		☐ UI mouse selection of positions in UI paramInput.
		✔ New code for movement target. @done(18-04-03 23:08)
	✔ Simplify gameRender. @done(18-04-01 05:19)
	☐ Economy
		☐ More sinks
	✔ redux store array accessor shorthand functions / utility. @done(18-03-25 06:44)
	☐ Rendering overhaul
		✔ 60fps support @done(18-03-25 06:50)
	☐ Add graphics for most items.
	✔ Rehydrate - server side. @done(18-04-01 03:38)
	☐ Client automatic reconnect.
	☐ Client resume player name.
	☐ Client side token persistence.
	☐ Hot reload?
	✔ Eslint integration, rules and first pass. @done(18-04-01 03:34)
	☐ Eslint to support class arrow methods.
	✔ Webpack 3 -> 4 migration @done(18-04-01 03:33)
	✔ Express server running webpack and file serving. @done(18-04-01 03:37)
	✔ Storybook (@storybook/react-native) https://github.com/storybooks/storybook @done(18-04-05 23:59)
	☐ Progressbar Storybook tests.
	
Milestone 4:

	☐ Player
		☐ New "energy" stat.
		☐ Doing different actions use "energy"
		☐ Calorie burn regenerates energy.
		☐ Can sleep
			☐ Can be done anywhere.
			☐ Regenerates energy
			☐ Sleeping in a bed regenerates more energy.
	☐ Buildings
		☐ Barracks
			☐ Has beds that cost to use
	☐ Better map generation.
	☐ Refactor client init/mainloop code.
	☐ Refactor server init/mainloop code.
	☐ Move netActions.send to a redux-saga that listens to all applicable actions?
	☐ Publishing
	☐ Investigate
		☐ redux-loop https://github.com/redux-loop/redux-loop
		☐ reducer-reducer?
		☐ Need for redux-thunk?
	☐ Server hosting.
		☐ Where?

Stories:

	☐ Player passes a food cart and tempted by delicious aromas has to either buy and eat some of the appealing food or suffer a mood malus.
	☐ Government has ordered a census of all ducks. A player picks up a contract for an area, but encounters a closed off area with high tolls. By entering a census mode, he's able to count the ducks inside, but is otherwise near blind and must return to starting position to exit the mode.

Info:
	https://en.wikipedia.org/wiki/Henry_George
	https://en.wikipedia.org/wiki/Georgism
	https://en.wikipedia.org/wiki/Geolibertarianism
	https://en.wikipedia.org/wiki/Left-libertarianism
	https://en.wikipedia.org/wiki/Economic_rent#Land_rent
	https://en.wikipedia.org/wiki/John_Rawls
	https://en.wikipedia.org/wiki/The_Law_of_Peoples
	https://en.wikipedia.org/wiki/Justice_as_Fairness:_A_Restatement
	

Icebox:

	☐ Investigate
		☐ react-native with -web?

Tasks vs Goals:

	Tasks currently:
		TGO object has a TaskQueue, inside it are Tasks.
		Task:
			* Title - what the players will see.
			* Cost - A list of requirements for completion.
			* Progress - Basically copy of cost in structure.
			* Action - Which redux action will fire when completed.
			* advanceActions - Redux actions that are repeated until Progress reaches Cost.
		Verdict:
			Doesn't support Tasks that require tasks to complete. At least without wrapping one into an action.
			Naming of advanceActions is stupid.




	Tasks and Goals.
		Currently tasks are 
		Tasks are something pretty immediately executable.
		Goals have uncertain completion with different possible routes.
	Only Tasks.
		Goals can be implemented by having bigger tasks.
		Having multiple levels for same functionality is stupid, what's when we have multiple goals together? Saga, epic, megagoal?
